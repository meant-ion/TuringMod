import { mapOptional } from '@d-fischer/shared-utils';
import { getMinLogLevelFromEnv } from "./getMinLogLevelFromEnv.mjs";
import { LogLevel, resolveLogLevel } from "./LogLevel.mjs";
var CustomLoggerWrapper = /** @class */ (function () {
    function CustomLoggerWrapper(_a) {
        var name = _a.name, minLevel = _a.minLevel, custom = _a.custom;
        var _b;
        this._minLevel = (_b = mapOptional(minLevel, function (lv) { return resolveLogLevel(lv); })) !== null && _b !== void 0 ? _b : getMinLogLevelFromEnv(name);
        this._override = typeof custom === 'function' ? { log: custom } : custom;
    }
    CustomLoggerWrapper.prototype.log = function (level, message) {
        if (this._shouldLog(level)) {
            this._override.log(level, message);
        }
    };
    CustomLoggerWrapper.prototype.crit = function (message) {
        if (!this._override.crit) {
            this.log(LogLevel.CRITICAL, message);
        }
        else if (this._shouldLog(LogLevel.CRITICAL)) {
            this._override.crit(message);
        }
    };
    CustomLoggerWrapper.prototype.error = function (message) {
        if (!this._override.error) {
            this.log(LogLevel.ERROR, message);
        }
        else if (this._shouldLog(LogLevel.ERROR)) {
            this._override.error(message);
        }
    };
    CustomLoggerWrapper.prototype.warn = function (message) {
        if (!this._override.warn) {
            this.log(LogLevel.WARNING, message);
        }
        else if (this._shouldLog(LogLevel.WARNING)) {
            this._override.warn(message);
        }
    };
    CustomLoggerWrapper.prototype.info = function (message) {
        if (!this._override.info) {
            this.log(LogLevel.INFO, message);
        }
        else if (this._shouldLog(LogLevel.INFO)) {
            this._override.info(message);
        }
    };
    CustomLoggerWrapper.prototype.debug = function (message) {
        if (!this._override.debug) {
            this.log(LogLevel.DEBUG, message);
        }
        else if (this._shouldLog(LogLevel.DEBUG)) {
            this._override.debug(message);
        }
    };
    CustomLoggerWrapper.prototype.trace = function (message) {
        if (!this._override.trace) {
            this.log(LogLevel.TRACE, message);
        }
        else if (this._shouldLog(LogLevel.TRACE)) {
            this._override.trace(message);
        }
    };
    CustomLoggerWrapper.prototype._shouldLog = function (level) {
        return this._minLevel === undefined || this._minLevel >= level;
    };
    return CustomLoggerWrapper;
}());
export { CustomLoggerWrapper };
//# sourceMappingURL=CustomLoggerWrapper.mjs.map
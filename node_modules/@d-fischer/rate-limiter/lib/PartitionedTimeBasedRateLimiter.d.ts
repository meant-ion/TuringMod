import type { RateLimiter } from './RateLimiter';
import type { TimeBasedRateLimiterConfig } from './TimeBasedRateLimiter';
export interface PartitionedTimeBasedRateLimiterConfig<Req, Res> extends TimeBasedRateLimiterConfig<Req, Res> {
    getPartitionKey: (req: Req) => string;
}
export declare class PartitionedTimeBasedRateLimiter<Req, Res> implements RateLimiter<Req, Res> {
    private readonly _partitionedQueue;
    private readonly _usedFromBucket;
    private readonly _bucketSize;
    private readonly _timeFrame;
    private readonly _callback;
    private readonly _partitionKeyCallback;
    private readonly _logger;
    constructor({ logger, bucketSize, timeFrame, doRequest, getPartitionKey }: PartitionedTimeBasedRateLimiterConfig<Req, Res>);
    request(req: Req): Promise<Res>;
    private _getPartitionedQueue;
    private _runRequest;
    private _runNextRequest;
}

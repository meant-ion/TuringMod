"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseBasedRateLimiter = void 0;
var tslib_1 = require("tslib");
var logger_1 = require("@d-fischer/logger");
var promise_allsettled_1 = require("@d-fischer/promise.allsettled");
var RetryAfterError_1 = require("./RetryAfterError");
var ResponseBasedRateLimiter = /** @class */ (function () {
    function ResponseBasedRateLimiter(_a) {
        var logger = _a.logger;
        this._queue = [];
        this._batchRunning = false;
        this._logger = logger_1.createLogger(tslib_1.__assign({ name: 'rate-limiter', emoji: true }, logger));
    }
    ResponseBasedRateLimiter.prototype.request = function (req) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                this._logger.trace('request start');
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var reqSpec = {
                            req: req,
                            resolve: resolve,
                            reject: reject
                        };
                        if (_this._batchRunning || _this._nextBatchTimer) {
                            _this._logger.trace("request queued batchRunning:" + _this._batchRunning.toString() + " hasNextBatchTimer:" + (!!_this
                                ._nextBatchTimer).toString());
                            _this._queue.push(reqSpec);
                        }
                        else {
                            void _this._runRequestBatch([reqSpec]);
                        }
                    })];
            });
        });
    };
    ResponseBasedRateLimiter.prototype._runRequestBatch = function (reqSpecs) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var promises, settledPromises, rejectedPromises, now, retryAt, retryAfter, params, delay;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._logger.trace("runRequestBatch start specs:" + reqSpecs.length);
                        this._batchRunning = true;
                        if (this._parameters) {
                            this._logger.debug("Remaining requests: " + this._parameters.remaining);
                        }
                        this._logger.debug("Doing " + reqSpecs.length + " requests, new queue length is " + this._queue.length);
                        promises = reqSpecs.map(function (reqSpec) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var req, resolve, reject, result, retry, params, e_1;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        req = reqSpec.req, resolve = reqSpec.resolve, reject = reqSpec.reject;
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, this.doRequest(req)];
                                    case 2:
                                        result = _a.sent();
                                        retry = this.needsToRetryAfter(result);
                                        if (retry !== null) {
                                            this._queue.unshift(reqSpec);
                                            this._logger.info("Retrying after " + retry + " ms");
                                            throw new RetryAfterError_1.RetryAfterError(retry);
                                        }
                                        params = this.getParametersFromResponse(result);
                                        resolve(result);
                                        return [2 /*return*/, params];
                                    case 3:
                                        e_1 = _a.sent();
                                        if (e_1 instanceof RetryAfterError_1.RetryAfterError) {
                                            throw e_1;
                                        }
                                        reject(e_1);
                                        return [2 /*return*/, undefined];
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); });
                        return [4 /*yield*/, promise_allsettled_1.default.call(Promise, promises)];
                    case 1:
                        settledPromises = _a.sent();
                        rejectedPromises = settledPromises.filter(function (p) { return p.status === 'rejected'; });
                        now = Date.now();
                        if (rejectedPromises.length) {
                            this._logger.trace('runRequestBatch some rejected');
                            retryAt = Math.max.apply(Math, tslib_1.__spread([now], rejectedPromises.map(function (p) { return p.reason.retryAt; })));
                            retryAfter = retryAt - now;
                            this._logger.warn("Waiting for " + retryAfter + " ms because the rate limit was exceeded");
                            this._nextBatchTimer = setTimeout(function () {
                                _this._parameters = undefined;
                                void _this._runNextBatch();
                            }, retryAfter);
                        }
                        else {
                            this._logger.trace('runRequestBatch none rejected');
                            params = settledPromises
                                .filter(function (p) {
                                return p.status === 'fulfilled' && p.value !== undefined;
                            })
                                .map(function (p) { return p.value; })
                                .reduce(function (carry, v) {
                                if (!carry) {
                                    return v;
                                }
                                // return v.resetsAt > carry.resetsAt ? v : carry;
                                return v.remaining < carry.remaining ? v : carry;
                            }, undefined);
                            this._batchRunning = false;
                            if (params) {
                                this._parameters = params;
                                if (params.resetsAt < now || params.remaining > 0) {
                                    this._logger.trace('runRequestBatch canRunMore');
                                    void this._runNextBatch();
                                }
                                else {
                                    delay = params.resetsAt - now;
                                    this._logger.trace("runRequestBatch delay:" + delay);
                                    this._logger.warn("Waiting for " + delay + " ms because the rate limit was reached");
                                    this._nextBatchTimer = setTimeout(function () {
                                        _this._parameters = undefined;
                                        void _this._runNextBatch();
                                    }, delay);
                                }
                            }
                        }
                        this._logger.trace('runRequestBatch end');
                        return [2 /*return*/];
                }
            });
        });
    };
    ResponseBasedRateLimiter.prototype._runNextBatch = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var amount, reqSpecs;
            return tslib_1.__generator(this, function (_a) {
                this._logger.trace('runNextBatch start');
                if (this._nextBatchTimer) {
                    clearTimeout(this._nextBatchTimer);
                    this._nextBatchTimer = undefined;
                }
                amount = this._parameters ? Math.min(this._parameters.remaining, this._parameters.limit / 10) : 1;
                reqSpecs = this._queue.splice(0, amount);
                if (reqSpecs.length) {
                    void this._runRequestBatch(reqSpecs);
                }
                this._logger.trace('runNextBatch end');
                return [2 /*return*/];
            });
        });
    };
    return ResponseBasedRateLimiter;
}());
exports.ResponseBasedRateLimiter = ResponseBasedRateLimiter;
//# sourceMappingURL=ResponseBasedRateLimiter.js.map
import { __read, __spread, __values } from "tslib";
export function partitionedFlatMap(arr, keyMapper, valueMapper) {
    var e_1, _a, _b;
    var result = {};
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var entry = arr_1_1.value;
            var key = keyMapper(entry);
            var values = valueMapper(entry);
            if (!Array.isArray(values)) {
                values = [values];
            }
            if (Object.prototype.hasOwnProperty.call(result, key)) {
                (_b = result[key]).push.apply(_b, __spread(values));
            }
            else {
                result[key] = values;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
//# sourceMappingURL=partitionedFlatMap.mjs.map
import { ResponseBasedRateLimiter } from '@d-fischer/rate-limiter';
import { callTwitchApiRaw } from '@twurple/api-call';
/** @private */
export class HelixRateLimiter extends ResponseBasedRateLimiter {
    async doRequest({ options, clientId, accessToken, fetchOptions }) {
        return await callTwitchApiRaw(options, clientId, accessToken, fetchOptions);
    }
    needsToRetryAfter(res) {
        if (res.status === 429) {
            return +res.headers.get('ratelimit-reset') * 1000 - Date.now();
        }
        return null;
    }
    getParametersFromResponse(res) {
        const headers = res.headers;
        return {
            limit: +headers.get('ratelimit-limit'),
            remaining: +headers.get('ratelimit-remaining'),
            resetsAt: +headers.get('ratelimit-reset') * 1000
        };
    }
}

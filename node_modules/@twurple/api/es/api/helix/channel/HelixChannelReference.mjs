import { __decorate } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { DataObject, rawDataSymbol, rtfm } from '@twurple/common';
/**
 * A reference to a Twitch channel.
 */
let HelixChannelReference = class HelixChannelReference extends DataObject {
    /** @private */
    constructor(data, client) {
        super(data);
        this._client = client;
    }
    /**
     * The ID of the channel.
     */
    get id() {
        return this[rawDataSymbol].broadcaster_id;
    }
    /**
     * The display name of the channel.
     */
    get displayName() {
        return this[rawDataSymbol].broadcaster_name;
    }
    /**
     * Retrieves more information about the channel.
     */
    async getChannel() {
        return (await this._client.channels.getChannelInfo(this[rawDataSymbol].broadcaster_id));
    }
    /**
     * Retrieves more information about the broadcaster of the channel.
     */
    async getBroadcaster() {
        return (await this._client.users.getUserById(this[rawDataSymbol].broadcaster_id));
    }
    /**
     * The ID of the game currently played on the channel.
     */
    get gameId() {
        return this[rawDataSymbol].game_id;
    }
    /**
     * The name of the game currently played on the channel.
     */
    get gameName() {
        return this[rawDataSymbol].game_name;
    }
    /**
     * Retrieves information about the game that is being played on the stream.
     */
    async getGame() {
        return (await this._client.games.getGameById(this[rawDataSymbol].game_id));
    }
    /**
     * The title of the channel.
     */
    get title() {
        return this[rawDataSymbol].title;
    }
};
__decorate([
    Enumerable(false)
], HelixChannelReference.prototype, "_client", void 0);
HelixChannelReference = __decorate([
    rtfm('api', 'HelixChannelReference', 'id')
], HelixChannelReference);
export { HelixChannelReference };

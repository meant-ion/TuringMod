import { __decorate } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { DataObject, rawDataSymbol, rtfm } from '@twurple/common';
let HelixClip = class HelixClip extends DataObject {
    /** @private */
    constructor(data, client) {
        super(data);
        this._client = client;
    }
    /**
     * The clip ID.
     */
    get id() {
        return this[rawDataSymbol].id;
    }
    /**
     * The URL of the clip.
     */
    get url() {
        return this[rawDataSymbol].url;
    }
    /**
     * The embed URL of the clip.
     */
    get embedUrl() {
        return this[rawDataSymbol].embed_url;
    }
    /**
     * The user ID of the broadcaster of the stream where the clip was created.
     */
    get broadcasterId() {
        return this[rawDataSymbol].broadcaster_id;
    }
    /**
     * The display name of the broadcaster of the stream where the clip was created.
     */
    get broadcasterDisplayName() {
        return this[rawDataSymbol].broadcaster_name;
    }
    /**
     * Retrieves information about the broadcaster of the stream where the clip was created.
     */
    async getBroadcaster() {
        return (await this._client.users.getUserById(this[rawDataSymbol].broadcaster_id));
    }
    /**
     * The user ID of the creator of the clip.
     */
    get creatorId() {
        return this[rawDataSymbol].creator_id;
    }
    /**
     * The display name of the creator of the clip.
     */
    get creatorDisplayName() {
        return this[rawDataSymbol].creator_name;
    }
    /**
     * Retrieves information about the creator of the clip.
     */
    async getCreator() {
        return (await this._client.users.getUserById(this[rawDataSymbol].creator_id));
    }
    /**
     * The ID of the video the clip is taken from.
     */
    get videoId() {
        return this[rawDataSymbol].video_id;
    }
    /**
     * Retrieves information about the video the clip is taken from.
     */
    async getVideo() {
        return (await this._client.videos.getVideoById(this[rawDataSymbol].video_id));
    }
    /**
     * The ID of the game that was being played when the clip was created.
     */
    get gameId() {
        return this[rawDataSymbol].game_id;
    }
    /**
     * Retrieves information about the game that was being played when the clip was created.
     */
    async getGame() {
        return (await this._client.games.getGameById(this[rawDataSymbol].game_id));
    }
    /**
     * The language of the stream where the clip was created.
     */
    get language() {
        return this[rawDataSymbol].language;
    }
    /**
     * The title of the clip.
     */
    get title() {
        return this[rawDataSymbol].title;
    }
    /**
     * The number of views of the clip.
     */
    get views() {
        return this[rawDataSymbol].view_count;
    }
    /**
     * The date when the clip was created.
     */
    get creationDate() {
        return new Date(this[rawDataSymbol].created_at);
    }
    /**
     * The URL of the thumbnail of the clip.
     */
    get thumbnailUrl() {
        return this[rawDataSymbol].thumbnail_url;
    }
};
__decorate([
    Enumerable(false)
], HelixClip.prototype, "_client", void 0);
HelixClip = __decorate([
    rtfm('api', 'HelixClip', 'id')
], HelixClip);
export { HelixClip };

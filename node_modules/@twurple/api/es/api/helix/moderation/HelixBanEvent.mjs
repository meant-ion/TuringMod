import { __decorate } from "tslib";
import { Enumerable, mapNullable } from '@d-fischer/shared-utils';
import { DataObject, rawDataSymbol, rtfm } from '@twurple/common';
/**
 * An event that indicates the change of a ban status, i.e. banning or unbanning a user.
 *
 * @inheritDoc
 */
let HelixBanEvent = class HelixBanEvent extends DataObject {
    /** @private */
    constructor(data, client) {
        super(data);
        this._client = client;
    }
    /**
     * The unique ID of the ban event.
     */
    get eventId() {
        return this[rawDataSymbol].id;
    }
    /**
     * The type of the ban event.
     */
    get eventType() {
        return this[rawDataSymbol].event_type;
    }
    /**
     * The date of the ban event.
     */
    get eventDate() {
        return new Date(this[rawDataSymbol].event_timestamp);
    }
    /**
     * The version of the ban event.
     */
    get eventVersion() {
        return this[rawDataSymbol].version;
    }
    /**
     * The ID of the banned user.
     */
    get userId() {
        return this[rawDataSymbol].event_data.user_id;
    }
    /**
     * The name of the banned user.
     */
    get userName() {
        return this[rawDataSymbol].event_data.user_login;
    }
    /**
     * The display name of the banned user.
     */
    get userDisplayName() {
        return this[rawDataSymbol].event_data.user_name;
    }
    /**
     * Retrieves more information about the user.
     */
    async getUser() {
        return (await this._client.users.getUserById(this[rawDataSymbol].event_data.user_id));
    }
    /**
     * The id of the broadcaster from whose chat the user was banned/unbanned.
     */
    get broadcasterId() {
        return this[rawDataSymbol].event_data.broadcaster_id;
    }
    /**
     * The name of the broadcaster from whose chat the user was banned/unbanned.
     */
    get broadcasterName() {
        return this[rawDataSymbol].event_data.broadcaster_login;
    }
    /**
     * The display name of the broadcaster from whose chat the user was banned/unbanned.
     */
    get broadcasterDisplayName() {
        return this[rawDataSymbol].event_data.broadcaster_name;
    }
    /**
     * Retrieves more information about the broadcaster.
     */
    async getBroadcaster() {
        return (await this._client.users.getUserById(this[rawDataSymbol].event_data.broadcaster_id));
    }
    /**
     * The date when the ban will expire; null for permanent bans.
     */
    get expiryDate() {
        return mapNullable(this[rawDataSymbol].event_data.expires_at, v => new Date(v));
    }
};
__decorate([
    Enumerable(false)
], HelixBanEvent.prototype, "_client", void 0);
HelixBanEvent = __decorate([
    rtfm('api', 'HelixBanEvent', 'userId')
], HelixBanEvent);
export { HelixBanEvent };

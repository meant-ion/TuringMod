import { extractUserId } from '@twurple/common';
import { HelixPaginatedRequest } from "../HelixPaginatedRequest.mjs";
import { HelixScheduleSegment } from "./HelixScheduleSegment.mjs";
/**
 * A paginator specifically for schedule segments.
 */
export class HelixPaginatedScheduleSegmentRequest extends HelixPaginatedRequest {
    /** @private */
    constructor(broadcaster, client, filter) {
        var _a;
        super({
            url: 'schedule',
            query: {
                broadcaster_id: extractUserId(broadcaster),
                start_time: filter === null || filter === void 0 ? void 0 : filter.startDate,
                utc_offset: (_a = filter === null || filter === void 0 ? void 0 : filter.utcOffset) === null || _a === void 0 ? void 0 : _a.toString()
            }
        }, client, data => new HelixScheduleSegment(data, client), 25);
    }
    // sadly, this hack is necessary to work around the weird data model of schedules
    // while still keeping the pagination code as generic as possible
    /** @private */
    async _fetchData(additionalOptions = {}) {
        const origData = (await super._fetchData(additionalOptions));
        return {
            data: origData.data.segments,
            pagination: origData.pagination
        };
    }
}

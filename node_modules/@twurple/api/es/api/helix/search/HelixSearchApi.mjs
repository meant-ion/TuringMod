import { __decorate } from "tslib";
import { rtfm } from '@twurple/common';
import { BaseApi } from "../../BaseApi.mjs";
import { HelixGame } from "../game/HelixGame.mjs";
import { HelixPaginatedRequest } from "../HelixPaginatedRequest.mjs";
import { createPaginatedResult } from "../HelixPaginatedResult.mjs";
import { makePaginationQuery } from "../HelixPagination.mjs";
import { HelixChannelSearchResult } from "./HelixChannelSearchResult.mjs";
/**
 * The Helix API methods that run searches.
 *
 * Can be accessed using `client.search` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const channels = await api.search.searchChannels('pear');
 * ```
 */
let HelixSearchApi = class HelixSearchApi extends BaseApi {
    /**
     * Search categories/games for an exact or partial match.
     *
     * @param query The search term.
     * @param pagination
     *
     * @expandParams
     */
    async searchCategories(query, pagination) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'search/categories',
            query: {
                query,
                ...makePaginationQuery(pagination)
            }
        });
        return createPaginatedResult(result, HelixGame, this._client);
    }
    /**
     * Creates a paginator for a category/game search.
     *
     * @param query The search term.
     */
    searchCategoriesPaginated(query) {
        return new HelixPaginatedRequest({
            url: 'search/categories',
            query: {
                query
            }
        }, this._client, data => new HelixGame(data, this._client));
    }
    /**
     * Search channels for an exact or partial match.
     *
     * @param query The search term.
     * @param filter
     *
     * @expandParams
     */
    async searchChannels(query, filter = {}) {
        var _a;
        const result = await this._client.callApi({
            type: 'helix',
            url: 'search/channels',
            query: {
                query,
                live_only: (_a = filter.liveOnly) === null || _a === void 0 ? void 0 : _a.toString(),
                ...makePaginationQuery(filter)
            }
        });
        return createPaginatedResult(result, HelixChannelSearchResult, this._client);
    }
    /**
     * Creates a paginator for a channel search.
     *
     * @param query The search term.
     * @param filter
     *
     * @expandParams
     */
    searchChannelsPaginated(query, filter = {}) {
        var _a;
        return new HelixPaginatedRequest({
            url: 'search/channels',
            query: {
                query,
                live_only: (_a = filter.liveOnly) === null || _a === void 0 ? void 0 : _a.toString()
            }
        }, this._client, data => new HelixChannelSearchResult(data, this._client));
    }
};
HelixSearchApi = __decorate([
    rtfm('api', 'HelixSearchApi')
], HelixSearchApi);
export { HelixSearchApi };

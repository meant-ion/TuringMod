"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = void 0;
const tslib_1 = require("tslib");
const cache_decorators_1 = require("@d-fischer/cache-decorators");
const api_call_1 = require("@twurple/api-call");
const auth_1 = require("@twurple/auth");
const common_1 = require("@twurple/common");
const BadgesApi_1 = require("./api/badges/BadgesApi");
const HelixBitsApi_1 = require("./api/helix/bits/HelixBitsApi");
const HelixChannelApi_1 = require("./api/helix/channel/HelixChannelApi");
const HelixChannelPointsApi_1 = require("./api/helix/channelPoints/HelixChannelPointsApi");
const HelixChatApi_1 = require("./api/helix/chat/HelixChatApi");
const HelixClipApi_1 = require("./api/helix/clip/HelixClipApi");
const HelixEventSubApi_1 = require("./api/helix/eventSub/HelixEventSubApi");
const HelixExtensionsApi_1 = require("./api/helix/extensions/HelixExtensionsApi");
const HelixGameApi_1 = require("./api/helix/game/HelixGameApi");
const HelixApiGroup_1 = require("./api/helix/HelixApiGroup");
const HelixRateLimiter_1 = require("./api/helix/HelixRateLimiter");
const HelixHypeTrainApi_1 = require("./api/helix/hypeTrain/HelixHypeTrainApi");
const HelixModerationApi_1 = require("./api/helix/moderation/HelixModerationApi");
const HelixPollApi_1 = require("./api/helix/poll/HelixPollApi");
const HelixPredictionApi_1 = require("./api/helix/prediction/HelixPredictionApi");
const HelixScheduleApi_1 = require("./api/helix/schedule/HelixScheduleApi");
const HelixSearchApi_1 = require("./api/helix/search/HelixSearchApi");
const HelixStreamApi_1 = require("./api/helix/stream/HelixStreamApi");
const HelixSubscriptionApi_1 = require("./api/helix/subscriptions/HelixSubscriptionApi");
const HelixTagApi_1 = require("./api/helix/tag/HelixTagApi");
const HelixTeamApi_1 = require("./api/helix/team/HelixTeamApi");
const HelixUserApi_1 = require("./api/helix/user/HelixUserApi");
const HelixVideoApi_1 = require("./api/helix/video/HelixVideoApi");
const UnsupportedApi_1 = require("./api/unsupported/UnsupportedApi");
const ConfigError_1 = require("./errors/ConfigError");
/**
 * An API client for the Twitch Helix API and other miscellaneous endpoints.
 */
let ApiClient = class ApiClient {
    /**
     * Creates a new API client instance.
     *
     * @param config Configuration for the client instance.
     */
    constructor(config) {
        if (!config.authProvider) {
            throw new ConfigError_1.ConfigError('No auth provider given. Please supply the `authProvider` option.');
        }
        this._helixRateLimiter = new HelixRateLimiter_1.HelixRateLimiter({
            logger: { name: 'twurple:api:rate-limiter', ...config.logger }
        });
        this._config = config;
    }
    /**
     * Requests scopes from the auth provider.
     *
     * @param scopes The scopes to request.
     */
    async requestScopes(scopes) {
        await this._config.authProvider.getAccessToken(scopes);
    }
    /**
     * Retrieves information about your access token.
     */
    async getTokenInfo() {
        try {
            const data = await this.callApi({ type: 'auth', url: 'validate' });
            return new auth_1.TokenInfo(data);
        }
        catch (e) {
            if (e instanceof api_call_1.HttpStatusCodeError && e.statusCode === 401) {
                throw new auth_1.InvalidTokenError();
            }
            throw e;
        }
    }
    /**
     * Makes a call to the Twitch API using your access token.
     *
     * @param options The configuration of the call.
     */
    async callApi(options) {
        var _a;
        const { authProvider } = this._config;
        const shouldAuth = (_a = options.auth) !== null && _a !== void 0 ? _a : true;
        let accessToken = shouldAuth
            ? await authProvider.getAccessToken(options.scope ? [options.scope] : undefined)
            : null;
        if (!accessToken) {
            return await api_call_1.callTwitchApi(options, authProvider.clientId, undefined, this._config.fetchOptions);
        }
        if (auth_1.accessTokenIsExpired(accessToken) && authProvider.refresh) {
            const newAccessToken = await authProvider.refresh();
            if (newAccessToken) {
                accessToken = newAccessToken;
            }
        }
        let response = await this._callApiInternal(options, authProvider.clientId, accessToken.accessToken);
        if (response.status === 401 && authProvider.refresh) {
            await authProvider.refresh();
            accessToken = await authProvider.getAccessToken(options.scope ? [options.scope] : []);
            if (accessToken) {
                response = await this._callApiInternal(options, authProvider.clientId, accessToken.accessToken);
            }
        }
        return await api_call_1.transformTwitchApiResponse(response);
    }
    /**
     * A group of Helix API methods.
     *
     * @deprecated Please remove `.helix` from your calls to access the API namespaces directly.
     */
    get helix() {
        return new HelixApiGroup_1.HelixApiGroup(this);
    }
    /**
     * The Helix bits API methods.
     */
    get bits() {
        return new HelixBitsApi_1.HelixBitsApi(this);
    }
    /**
     * The Helix channels API methods.
     */
    get channels() {
        return new HelixChannelApi_1.HelixChannelApi(this);
    }
    /**
     * The Helix channel points API methods.
     */
    get channelPoints() {
        return new HelixChannelPointsApi_1.HelixChannelPointsApi(this);
    }
    /**
     * The Helix chat API methods.
     */
    get chat() {
        return new HelixChatApi_1.HelixChatApi(this);
    }
    /**
     * The Helix clips API methods.
     */
    get clips() {
        return new HelixClipApi_1.HelixClipApi(this);
    }
    /**
     * The Helix EventSub API methods.
     */
    get eventSub() {
        return new HelixEventSubApi_1.HelixEventSubApi(this);
    }
    /**
     * The Helix extensions API methods.
     */
    get extensions() {
        return new HelixExtensionsApi_1.HelixExtensionsApi(this);
    }
    /**
     * The Helix game API methods.
     */
    get games() {
        return new HelixGameApi_1.HelixGameApi(this);
    }
    /**
     * The Helix Hype Train API methods.
     */
    get hypeTrain() {
        return new HelixHypeTrainApi_1.HelixHypeTrainApi(this);
    }
    /**
     * The Helix moderation API methods.
     */
    get moderation() {
        return new HelixModerationApi_1.HelixModerationApi(this);
    }
    /**
     * The Helix poll API methods.
     */
    get polls() {
        return new HelixPollApi_1.HelixPollApi(this);
    }
    /**
     * The Helix prediction API methods.
     */
    get predictions() {
        return new HelixPredictionApi_1.HelixPredictionApi(this);
    }
    /**
     * The Helix schedule API methods.
     */
    get schedule() {
        return new HelixScheduleApi_1.HelixScheduleApi(this);
    }
    /**
     * The Helix search API methods.
     */
    get search() {
        return new HelixSearchApi_1.HelixSearchApi(this);
    }
    /**
     * The Helix stream API methods.
     */
    get streams() {
        return new HelixStreamApi_1.HelixStreamApi(this);
    }
    /**
     * The Helix subscription API methods.
     */
    get subscriptions() {
        return new HelixSubscriptionApi_1.HelixSubscriptionApi(this);
    }
    /**
     * The Helix tag API methods.
     */
    get tags() {
        return new HelixTagApi_1.HelixTagApi(this);
    }
    /**
     * The Helix team API methods.
     */
    get teams() {
        return new HelixTeamApi_1.HelixTeamApi(this);
    }
    /**
     * The Helix user API methods.
     */
    get users() {
        return new HelixUserApi_1.HelixUserApi(this);
    }
    /**
     * The Helix video API methods.
     */
    get videos() {
        return new HelixVideoApi_1.HelixVideoApi(this);
    }
    /**
     * The API methods that deal with badges.
     *
     * @deprecated Use {@HelixChatApi}'s badge methods instead.
     */
    get badges() {
        return new BadgesApi_1.BadgesApi(this);
    }
    /**
     * Various API methods that are not officially supported by Twitch.
     */
    get unsupported() {
        return new UnsupportedApi_1.UnsupportedApi(this);
    }
    /** @private */
    get _authProvider() {
        return this._config.authProvider;
    }
    async _callApiInternal(options, clientId, accessToken) {
        const { fetchOptions } = this._config;
        if (options.type === 'helix') {
            return await this._helixRateLimiter.request({ options, clientId, accessToken, fetchOptions });
        }
        return await api_call_1.callTwitchApiRaw(options, clientId, accessToken, fetchOptions);
    }
};
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "helix", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "bits", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "channels", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "channelPoints", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "chat", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "clips", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "eventSub", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "extensions", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "games", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "hypeTrain", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "moderation", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "polls", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "predictions", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "schedule", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "search", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "streams", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "subscriptions", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "tags", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "teams", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "users", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "videos", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "badges", null);
tslib_1.__decorate([
    cache_decorators_1.CachedGetter()
], ApiClient.prototype, "unsupported", null);
ApiClient = tslib_1.__decorate([
    cache_decorators_1.Cacheable,
    common_1.rtfm('api', 'ApiClient')
], ApiClient);
exports.ApiClient = ApiClient;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BadgesApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../BaseApi");
const ChatBadgeList_1 = require("./ChatBadgeList");
/**
 * The API methods that deal with badges.
 *
 * Can be accessed using `client.badges` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const cheermotes = await api.badges.getGlobalBadges();
 * ```
 */
let BadgesApi = class BadgesApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves all globally applicable chat badges.
     *
     * @param language The language of the retrieved badge descriptions.
     */
    async getGlobalBadges(language) {
        const data = await this._client.callApi({
            url: 'https://badges.twitch.tv/v1/badges/global/display',
            query: {
                language
            },
            type: 'custom'
        });
        return new ChatBadgeList_1.ChatBadgeList(data.badge_sets);
    }
    /**
     * Retrieves all applicable chat badges for a given channel.
     *
     * @param channel The channel to retrieve the chat badges for.
     * @param includeGlobal Whether to include global badges in the result list.
     * @param language The language of the retrieved badge descriptions.
     */
    async getChannelBadges(channel, includeGlobal = true, language) {
        const data = await this._client.callApi({
            url: `https://badges.twitch.tv/v1/badges/channels/${common_1.extractUserId(channel)}/display`,
            query: {
                language
            },
            type: 'custom'
        });
        const channelBadges = new ChatBadgeList_1.ChatBadgeList(data.badge_sets);
        if (includeGlobal) {
            return (await this.getGlobalBadges(language))._merge(channelBadges);
        }
        return channelBadges;
    }
};
BadgesApi = tslib_1.__decorate([
    common_1.rtfm('api', 'BadgesApi')
], BadgesApi);
exports.BadgesApi = BadgesApi;

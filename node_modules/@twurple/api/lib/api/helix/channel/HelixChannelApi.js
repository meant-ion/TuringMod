"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixChannelApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixChannel_1 = require("./HelixChannel");
const HelixChannelEditor_1 = require("./HelixChannelEditor");
/**
 * The Helix API methods that deal with channels.
 *
 * Can be accessed using `client.channels` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const channel = await api.channels.getChannelInfo('125328655');
 * ```
 */
let HelixChannelApi = class HelixChannelApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves the channel data for the given user.
     *
     * @param user The user you want to get channel info for.
     */
    async getChannelInfo(user) {
        const userId = common_1.extractUserId(user);
        const result = await this._client.callApi({
            type: 'helix',
            url: 'channels',
            query: {
                broadcaster_id: userId
            }
        });
        return result.data.length ? new HelixChannel_1.HelixChannel(result.data[0], this._client) : null;
    }
    /**
     * Updates the given user's channel data.
     *
     * @param user The user you want to update channel info for.
     * @param data The channel info to set.
     */
    async updateChannelInfo(user, data) {
        var _a;
        const userId = common_1.extractUserId(user);
        await this._client.callApi({
            type: 'helix',
            url: 'channels',
            method: 'PATCH',
            scope: 'user:edit:broadcast',
            query: {
                broadcaster_id: userId
            },
            jsonBody: {
                game_id: data.gameId,
                broadcaster_language: data.language,
                title: data.title,
                delay: (_a = data.delay) === null || _a === void 0 ? void 0 : _a.toString()
            }
        });
    }
    /**
     * Starts a commercial on a channel.
     *
     * @param broadcaster The broadcaster on whose channel the commercial is started.
     * @param length The length of the commercial, in seconds.
     */
    async startChannelCommercial(broadcaster, length) {
        await this._client.callApi({
            type: 'helix',
            url: 'channels/commercial',
            method: 'POST',
            scope: 'channel:edit:commercial',
            jsonBody: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                length: length
            }
        });
    }
    /**
     * Retrieves a list of users who have editor permissions on your channel.
     */
    async getChannelEditors(broadcaster) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'channels/editors',
            scope: 'channel:read:editors',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster)
            }
        });
        return result.data.map(data => new HelixChannelEditor_1.HelixChannelEditor(data, this._client));
    }
};
HelixChannelApi = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixChannelApi')
], HelixChannelApi);
exports.HelixChannelApi = HelixChannelApi;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixChatApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixChannelEmote_1 = require("./HelixChannelEmote");
const HelixChatBadgeSet_1 = require("./HelixChatBadgeSet");
const HelixEmote_1 = require("./HelixEmote");
const HelixEmoteFromSet_1 = require("./HelixEmoteFromSet");
/**
 * The Helix API methods that deal with chat.
 *
 * Can be accessed using `client.chat` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const rewards = await api.chat.getChannelBadges('125328655');
 * ```
 */
let HelixChatApi = class HelixChatApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves all global badges.
     */
    async getGlobalBadges() {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'chat/badges/global'
        });
        return result.data.map(data => new HelixChatBadgeSet_1.HelixChatBadgeSet(data));
    }
    /**
     * Retrieves all badges specific to the given broadcaster.
     *
     * @param broadcaster The broadcaster to retrieve badges for.
     */
    async getChannelBadges(broadcaster) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'chat/badges',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster)
            }
        });
        return result.data.map(data => new HelixChatBadgeSet_1.HelixChatBadgeSet(data));
    }
    /**
     * Retrieves all global emotes.
     */
    async getGlobalEmotes() {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'chat/emotes/global'
        });
        return result.data.map(data => new HelixEmote_1.HelixEmote(data));
    }
    /**
     * Retrieves all emotes from a channel.
     *
     * @param channel The channel to retrieve emotes from.
     */
    async getChannelEmotes(channel) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'chat/emotes',
            query: {
                broadcaster_id: common_1.extractUserId(channel)
            }
        });
        return result.data.map(data => new HelixChannelEmote_1.HelixChannelEmote(data, this._client));
    }
    /**
     * Retrieves all emotes from a list of emote sets.
     *
     * @param setIds The IDs of the emote sets to retrieve emotes from.
     */
    async getEmotesFromSets(setIds) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'chat/emotes/set',
            query: {
                emote_set_id: setIds
            }
        });
        return result.data.map(data => new HelixEmoteFromSet_1.HelixEmoteFromSet(data, this._client));
    }
};
HelixChatApi = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixChatApi')
], HelixChatApi);
exports.HelixChatApi = HelixChatApi;

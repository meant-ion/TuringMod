"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixHypeTrainApi = void 0;
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
const HelixPaginatedResult_1 = require("../HelixPaginatedResult");
const HelixPagination_1 = require("../HelixPagination");
const HelixHypeTrainEvent_1 = require("./HelixHypeTrainEvent");
/**
 * The Helix API methods that deal with Hype Trains.
 *
 * Can be accessed using `client.hypeTrain` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const { data: events } = await api.hypeTrain.getHypeTrainEventsForBroadcaster('125328655');
 * ```
 */
class HelixHypeTrainApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves the events of the current or latest Hype Train for the specified broadcaster.
     *
     * @param broadcaster The broadcaster to fetch Hype Train events for.
     * @param pagination
     *
     * @expandParams
     */
    async getHypeTrainEventsForBroadcaster(broadcaster, pagination) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'hypetrain/events',
            scope: 'channel:read:hype_train',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                ...HelixPagination_1.makePaginationQuery(pagination)
            }
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixHypeTrainEvent_1.HelixHypeTrainEvent, this._client);
    }
    /**
     * Creates a paginator for the events of the current or latest Hype Train for the specified broadcaster.
     *
     * @param broadcaster The broadcaster to fetch Hype Train events for.
     */
    getHypeTrainEventsForBroadcasterPaginated(broadcaster) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'hypetrain/events',
            scope: 'channel:read:hype_train',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster)
            }
        }, this._client, (data) => new HelixHypeTrainEvent_1.HelixHypeTrainEvent(data, this._client));
    }
    /**
     * Retrieves a single Hype Train event by ID.
     *
     * @param id The ID of the Hype Train event.
     */
    async getHypeTrainEventById(id) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'hypetrain/events',
            scope: 'channel:read:hype_train',
            query: {
                id
            }
        });
        return result.data.length ? new HelixHypeTrainEvent_1.HelixHypeTrainEvent(result.data[0], this._client) : null;
    }
}
exports.HelixHypeTrainApi = HelixHypeTrainApi;

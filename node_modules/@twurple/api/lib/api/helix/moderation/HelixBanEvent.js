"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixBanEvent = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * An event that indicates the change of a ban status, i.e. banning or unbanning a user.
 *
 * @inheritDoc
 */
let HelixBanEvent = class HelixBanEvent extends common_1.DataObject {
    /** @private */
    constructor(data, client) {
        super(data);
        this._client = client;
    }
    /**
     * The unique ID of the ban event.
     */
    get eventId() {
        return this[common_1.rawDataSymbol].id;
    }
    /**
     * The type of the ban event.
     */
    get eventType() {
        return this[common_1.rawDataSymbol].event_type;
    }
    /**
     * The date of the ban event.
     */
    get eventDate() {
        return new Date(this[common_1.rawDataSymbol].event_timestamp);
    }
    /**
     * The version of the ban event.
     */
    get eventVersion() {
        return this[common_1.rawDataSymbol].version;
    }
    /**
     * The ID of the banned user.
     */
    get userId() {
        return this[common_1.rawDataSymbol].event_data.user_id;
    }
    /**
     * The name of the banned user.
     */
    get userName() {
        return this[common_1.rawDataSymbol].event_data.user_login;
    }
    /**
     * The display name of the banned user.
     */
    get userDisplayName() {
        return this[common_1.rawDataSymbol].event_data.user_name;
    }
    /**
     * Retrieves more information about the user.
     */
    async getUser() {
        return (await this._client.users.getUserById(this[common_1.rawDataSymbol].event_data.user_id));
    }
    /**
     * The id of the broadcaster from whose chat the user was banned/unbanned.
     */
    get broadcasterId() {
        return this[common_1.rawDataSymbol].event_data.broadcaster_id;
    }
    /**
     * The name of the broadcaster from whose chat the user was banned/unbanned.
     */
    get broadcasterName() {
        return this[common_1.rawDataSymbol].event_data.broadcaster_login;
    }
    /**
     * The display name of the broadcaster from whose chat the user was banned/unbanned.
     */
    get broadcasterDisplayName() {
        return this[common_1.rawDataSymbol].event_data.broadcaster_name;
    }
    /**
     * Retrieves more information about the broadcaster.
     */
    async getBroadcaster() {
        return (await this._client.users.getUserById(this[common_1.rawDataSymbol].event_data.broadcaster_id));
    }
    /**
     * The date when the ban will expire; null for permanent bans.
     */
    get expiryDate() {
        return shared_utils_1.mapNullable(this[common_1.rawDataSymbol].event_data.expires_at, v => new Date(v));
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], HelixBanEvent.prototype, "_client", void 0);
HelixBanEvent = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixBanEvent', 'userId')
], HelixBanEvent);
exports.HelixBanEvent = HelixBanEvent;

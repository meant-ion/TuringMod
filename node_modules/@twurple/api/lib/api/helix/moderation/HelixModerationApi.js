"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixModerationApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
const HelixPaginatedResult_1 = require("../HelixPaginatedResult");
const HelixPagination_1 = require("../HelixPagination");
const HelixBan_1 = require("./HelixBan");
const HelixBanEvent_1 = require("./HelixBanEvent");
const HelixModerator_1 = require("./HelixModerator");
const HelixModeratorEvent_1 = require("./HelixModeratorEvent");
/**
 * The Helix API methods that deal with moderation.
 *
 * Can be accessed using `client.moderation` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const { data: users } = await api.moderation.getBannedUsers('61369223');
 * ```
 */
let HelixModerationApi = class HelixModerationApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves a list of banned users in a given channel.
     *
     * @param channel The channel to retrieve the banned users from.
     * @param filter Additional filters for the result set.
     */
    async getBannedUsers(channel, filter) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'moderation/banned',
            scope: 'moderation:read',
            query: {
                broadcaster_id: common_1.extractUserId(channel),
                user_id: filter === null || filter === void 0 ? void 0 : filter.userId,
                ...HelixPagination_1.makePaginationQuery(filter)
            }
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixBan_1.HelixBan, this._client);
    }
    /**
     * Creates a paginator for banned users in a given channel.
     *
     * @param channel The channel to retrieve the banned users from.
     */
    getBannedUsersPaginated(channel) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'moderation/banned',
            scope: 'moderation:read',
            query: {
                broadcaster_id: common_1.extractUserId(channel)
            }
        }, this._client, data => new HelixBan_1.HelixBan(data, this._client), 50 // possibly a relatively consistent workaround for twitchdev/issues#18
        );
    }
    /**
     * Checks whether a given user is banned in a given channel.
     *
     * @param channel The channel to check for a ban of the given user.
     * @param user The user to check for a ban in the given channel.
     */
    async checkUserBan(channel, user) {
        const userId = common_1.extractUserId(user);
        const result = await this.getBannedUsers(channel, { userId });
        return result.data.some(ban => ban.userId === userId);
    }
    /**
     * Retrieves a list of ban events for a given channel.
     *
     * @param channel The channel to retrieve the ban events from.
     * @param filter Additional filters for the result set.
     */
    async getBanEvents(channel, filter) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'moderation/banned/events',
            scope: 'moderation:read',
            query: {
                broadcaster_id: common_1.extractUserId(channel),
                user_id: filter === null || filter === void 0 ? void 0 : filter.userId,
                ...HelixPagination_1.makePaginationQuery(filter)
            }
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixBanEvent_1.HelixBanEvent, this._client);
    }
    /**
     * Creates a paginator for ban events for a given channel.
     *
     * @param channel The channel to retrieve the ban events from.
     */
    getBanEventsPaginated(channel) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'moderation/banned/events',
            scope: 'moderation:read',
            query: {
                broadcaster_id: common_1.extractUserId(channel)
            }
        }, this._client, data => new HelixBanEvent_1.HelixBanEvent(data, this._client));
    }
    /**
     * Retrieves a list of moderators in a given channel.
     *
     * @param channel The channel to retrieve moderators from.
     * @param filter Additional filters for the result set.
     */
    async getModerators(channel, filter) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'moderation/moderators',
            scope: 'moderation:read',
            query: {
                broadcaster_id: common_1.extractUserId(channel),
                user_id: filter === null || filter === void 0 ? void 0 : filter.userId,
                ...HelixPagination_1.makePaginationQuery(filter)
            }
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixModerator_1.HelixModerator, this._client);
    }
    /**
     * Creates a paginator for moderators in a given channel.
     *
     * @param channel The channel to retrieve moderators from.
     */
    getModeratorsPaginated(channel) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'moderation/moderators',
            scope: 'moderation:read',
            query: {
                broadcaster_id: common_1.extractUserId(channel)
            }
        }, this._client, data => new HelixModerator_1.HelixModerator(data, this._client));
    }
    /**
     * Checks whether a given user is a moderator of a given channel.
     *
     * @param channel The channel to check.
     * @param user The user to check.
     */
    async checkUserMod(channel, user) {
        const userId = common_1.extractUserId(user);
        const result = await this.getModerators(channel, { userId });
        return result.data.some(mod => mod.userId === userId);
    }
    /**
     * Retrieves a list of moderator events for a given channel.
     *
     * @param channel The channel to retrieve the moderator events from.
     * @param filter Additional filters for the result set.
     */
    async getModeratorEvents(channel, filter) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'moderation/moderators/events',
            scope: 'moderation:read',
            query: {
                broadcaster_id: common_1.extractUserId(channel),
                user_id: filter === null || filter === void 0 ? void 0 : filter.userId,
                ...HelixPagination_1.makePaginationQuery(filter)
            }
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixModeratorEvent_1.HelixModeratorEvent, this._client);
    }
    /**
     * Creates a paginator for moderator events for a given channel.
     *
     * @param channel The channel to retrieve the moderator events from.
     */
    getModeratorEventsPaginated(channel) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'moderation/moderators/events',
            scope: 'moderation:read',
            query: {
                broadcaster_id: common_1.extractUserId(channel)
            }
        }, this._client, data => new HelixModeratorEvent_1.HelixModeratorEvent(data, this._client));
    }
    /**
     * Processes a message held by AutoMod.
     *
     * @param user The user who is processing the message.
     * @param msgId The ID of the message.
     * @param allow Whether to allow the message - `true` allows, and `false` denies.
     */
    async processHeldAutoModMessage(user, msgId, allow) {
        await this._client.callApi({
            type: 'helix',
            url: 'moderation/automod/message',
            method: 'POST',
            scope: 'moderator:manage:automod',
            jsonBody: {
                user_id: common_1.extractUserId(user),
                msg_id: msgId,
                action: allow ? 'ALLOW' : 'DENY'
            }
        });
    }
};
HelixModerationApi = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixModerationApi')
], HelixModerationApi);
exports.HelixModerationApi = HelixModerationApi;

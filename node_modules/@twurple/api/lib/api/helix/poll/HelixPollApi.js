"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixPollApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
const HelixPaginatedResult_1 = require("../HelixPaginatedResult");
const HelixPagination_1 = require("../HelixPagination");
const HelixPoll_1 = require("./HelixPoll");
/**
 * The Helix API methods that deal with polls.
 *
 * Can be accessed using `client.helix.polls` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const { data: polls } = await api.helix.polls.getPolls('61369223');
 * ```
 */
let HelixPollApi = class HelixPollApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves a list of polls for the given broadcaster.
     *
     * @param broadcaster The broadcaster to retrieve polls for.
     * @param pagination
     *
     * @expandParams
     */
    async getPolls(broadcaster, pagination) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'polls',
            scope: 'channel:read:polls',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                ...HelixPagination_1.makePaginationQuery(pagination)
            }
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixPoll_1.HelixPoll, this._client);
    }
    /**
     * Creates a paginator for polls for the given broadcaster.
     *
     * @param broadcaster The broadcaster to retrieve polls for.
     */
    getPollsPaginated(broadcaster) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'polls',
            scope: 'channel:read:polls',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster)
            }
        }, this._client, data => new HelixPoll_1.HelixPoll(data, this._client), 20);
    }
    /**
     * Retrieves polls by IDs.
     *
     * @param broadcaster The broadcaster to retrieve the polls for.
     * @param ids The IDs of the polls.
     */
    async getPollsByIds(broadcaster, ids) {
        if (!ids.length) {
            return [];
        }
        const result = await this._client.callApi({
            type: 'helix',
            url: 'polls',
            scope: 'channel:read:polls',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                id: ids
            }
        });
        return result.data.map(data => new HelixPoll_1.HelixPoll(data, this._client));
    }
    /**
     * Retrieves a poll by ID.
     *
     * @param broadcaster The broadcaster to retrieve the poll for.
     * @param id The ID of the poll.
     */
    async getPollById(broadcaster, id) {
        const polls = await this.getPollsByIds(broadcaster, [id]);
        return polls.length ? polls[0] : null;
    }
    /**
     * Creates a new poll.
     *
     * @param broadcaster The broadcaster to create the poll for.
     * @param data
     *
     * @expandParams
     */
    async createPoll(broadcaster, data) {
        var _a, _b;
        const result = await this._client.callApi({
            type: 'helix',
            url: 'polls',
            method: 'POST',
            scope: 'channel:manage:polls',
            jsonBody: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                title: data.title,
                choices: data.choices.map(title => ({ title })),
                duration: data.duration,
                bits_voting_enabled: data.bitsPerVote != null,
                bits_per_vote: (_a = data.bitsPerVote) !== null && _a !== void 0 ? _a : 0,
                channel_points_voting_enabled: data.channelPointsPerVote != null,
                channel_points_per_vote: (_b = data.channelPointsPerVote) !== null && _b !== void 0 ? _b : 0
            }
        });
        return new HelixPoll_1.HelixPoll(result.data[0], this._client);
    }
    /**
     * Ends a poll.
     *
     * @param broadcaster The broadcaster to end the poll for.
     * @param id The ID of the poll to end.
     * @param showResult Whether to allow the result to be viewed publicly.
     */
    async endPoll(broadcaster, id, showResult = true) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'polls',
            method: 'PATCH',
            scope: 'channel:manage:polls',
            jsonBody: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                id,
                status: showResult ? 'TERMINATED' : 'ARCHIVED'
            }
        });
        return new HelixPoll_1.HelixPoll(result.data[0], this._client);
    }
};
HelixPollApi = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixPollApi')
], HelixPollApi);
exports.HelixPollApi = HelixPollApi;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixPredictionApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
const HelixPaginatedResult_1 = require("../HelixPaginatedResult");
const HelixPagination_1 = require("../HelixPagination");
const HelixPrediction_1 = require("./HelixPrediction");
/**
 * The Helix API methods that deal with predictions.
 *
 * Can be accessed using `client.helix.predictions` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const { data: predictions } = await api.helix.predictions.getPredictions('61369223');
 * ```
 */
let HelixPredictionApi = class HelixPredictionApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves a list of predictions for the given broadcaster.
     *
     * @param broadcaster The broadcaster to retrieve predictions for.
     * @param pagination
     *
     * @expandParams
     */
    async getPredictions(broadcaster, pagination) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'predictions',
            scope: 'channel:read:predictions',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                ...HelixPagination_1.makePaginationQuery(pagination)
            }
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixPrediction_1.HelixPrediction, this._client);
    }
    /**
     * Creates a paginator for predictions for the given broadcaster.
     *
     * @param broadcaster The broadcaster to retrieve predictions for.
     */
    getPredictionsPaginated(broadcaster) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'predictions',
            scope: 'channel:read:predictions',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster)
            }
        }, this._client, data => new HelixPrediction_1.HelixPrediction(data, this._client), 20);
    }
    /**
     * Retrieves predictions by IDs.
     *
     * @param broadcaster The broadcaster to retrieve the predictions for.
     * @param ids The IDs of the predictions.
     */
    async getPredictionsByIds(broadcaster, ids) {
        if (!ids.length) {
            return [];
        }
        const result = await this._client.callApi({
            type: 'helix',
            url: 'predictions',
            scope: 'channel:read:predictions',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                id: ids
            }
        });
        return result.data.map(data => new HelixPrediction_1.HelixPrediction(data, this._client));
    }
    /**
     * Retrieves a prediction by ID.
     *
     * @param broadcaster The broadcaster to retrieve the prediction for.
     * @param id The ID of the prediction.
     */
    async getPredictionById(broadcaster, id) {
        const predictions = await this.getPredictionsByIds(broadcaster, [id]);
        return predictions.length ? predictions[0] : null;
    }
    /**
     * Creates a new prediction.
     *
     * @param broadcaster The broadcaster to create the prediction for.
     * @param data
     *
     * @expandParams
     */
    async createPrediction(broadcaster, data) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'predictions',
            method: 'POST',
            scope: 'channel:manage:predictions',
            jsonBody: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                title: data.title,
                outcomes: data.outcomes.map(title => ({ title })),
                prediction_window: data.autoLockAfter
            }
        });
        return new HelixPrediction_1.HelixPrediction(result.data[0], this._client);
    }
    /**
     * Locks a prediction.
     *
     * @param broadcaster The broadcaster to lock the prediction for.
     * @param id The ID of the prediction to lock.
     */
    async lockPrediction(broadcaster, id) {
        return await this._endPrediction(broadcaster, id, 'LOCKED');
    }
    /**
     * Resolves a prediction.
     *
     * @param broadcaster The broadcaster to resolve the prediction for.
     * @param id The ID of the prediction to resolve.
     * @param outcomeId The ID of the winning outcome.
     */
    async resolvePrediction(broadcaster, id, outcomeId) {
        return await this._endPrediction(broadcaster, id, 'RESOLVED', outcomeId);
    }
    /**
     * Cancels a prediction.
     *
     * @param broadcaster The broadcaster to cancel the prediction for.
     * @param id The ID of the prediction to cancel.
     */
    async cancelPrediction(broadcaster, id) {
        return await this._endPrediction(broadcaster, id, 'CANCELED');
    }
    async _endPrediction(broadcaster, id, status, outcomeId) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'predictions',
            method: 'PATCH',
            scope: 'channel:manage:predictions',
            jsonBody: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                id,
                status,
                winning_outcome_id: outcomeId
            }
        });
        return new HelixPrediction_1.HelixPrediction(result.data[0], this._client);
    }
};
HelixPredictionApi = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixPredictionApi')
], HelixPredictionApi);
exports.HelixPredictionApi = HelixPredictionApi;

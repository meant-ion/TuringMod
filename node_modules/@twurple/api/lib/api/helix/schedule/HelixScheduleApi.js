"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixScheduleApi = void 0;
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixPagination_1 = require("../HelixPagination");
const HelixPaginatedScheduleSegmentRequest_1 = require("./HelixPaginatedScheduleSegmentRequest");
const HelixSchedule_1 = require("./HelixSchedule");
const HelixScheduleSegment_1 = require("./HelixScheduleSegment");
/**
 * The Helix API methods that deal with schedules.
 *
 * Can be accessed using `client.helix.schedule` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const { data: schedule } = await api.helix.schedule.getSchedule('61369223');
 */
class HelixScheduleApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves the schedule for a given broadcaster.
     *
     * @param broadcaster The broadcaster to get the schedule of.
     * @param filter
     *
     * @expandParams
     */
    async getSchedule(broadcaster, filter) {
        var _a;
        const result = await this._client.callApi({
            type: 'helix',
            url: 'schedule',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                start_time: filter === null || filter === void 0 ? void 0 : filter.startDate,
                utc_offset: (_a = filter === null || filter === void 0 ? void 0 : filter.utcOffset) === null || _a === void 0 ? void 0 : _a.toString(),
                ...HelixPagination_1.makePaginationQuery(filter)
            }
        });
        return {
            data: new HelixSchedule_1.HelixSchedule(result.data, this._client),
            cursor: result.pagination.cursor
        };
    }
    /**
     * Creates a paginator for schedule segments for a given broadcaster.
     *
     * @param broadcaster The broadcaster to get the schedule segments of.
     * @param filter
     *
     * @expandParams
     */
    getScheduleSegmentsPaginated(broadcaster, filter) {
        return new HelixPaginatedScheduleSegmentRequest_1.HelixPaginatedScheduleSegmentRequest(broadcaster, this._client, filter);
    }
    /**
     * Retrieves a set of schedule segments by IDs.
     *
     * @param broadcaster The broadcaster to get schedule segments of.
     * @param ids The IDs of the schedule segments.
     */
    async getScheduleSegmentsByIds(broadcaster, ids) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'schedule',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                id: ids
            }
        });
        return result.data.segments.map(data => new HelixScheduleSegment_1.HelixScheduleSegment(data, this._client));
    }
    /**
     * Retrieves a single schedule segment by ID.
     *
     * @param broadcaster The broadcaster to get a schedule segment of.
     * @param id The ID of the schedule segment.
     */
    async getScheduleSegmentById(broadcaster, id) {
        const segments = await this.getScheduleSegmentsByIds(broadcaster, [id]);
        return segments.length ? segments[0] : null;
    }
    /**
     * Retrieves the schedule for a given broadcaster in iCal format.
     *
     * @param broadcaster The broadcaster to get the schedule for.
     */
    async getScheduleAsIcal(broadcaster) {
        return await this._client.callApi({
            type: 'helix',
            url: 'schedule/icalendar',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster)
            }
        });
    }
    /**
     * Updates the schedule settings of a given broadcaster.
     *
     * @param broadcaster The broadcaster to update the schedule settings for.
     * @param settings
     *
     * @expandParams
     */
    async updateScheduleSettings(broadcaster, settings) {
        const vacationUpdateQuery = settings.vacation
            ? {
                is_vacation_enabled: 'true',
                vacation_start_time: settings.vacation.startDate,
                vacation_end_time: settings.vacation.endDate,
                timezone: settings.vacation.timezone
            }
            : {
                is_vacation_enabled: 'false'
            };
        await this._client.callApi({
            type: 'helix',
            url: 'schedule/settings',
            method: 'PATCH',
            scope: 'channel:manage:schedule',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                ...vacationUpdateQuery
            }
        });
    }
    /**
     * Creates a new segment in a given broadcaster's schedule.
     *
     * @param broadcaster The broadcaster to create a new schedule segment for.
     * @param data
     *
     * @expandParams
     */
    async createScheduleSegment(broadcaster, data) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'schedule/segment',
            method: 'POST',
            scope: 'channel:manage:schedule',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster)
            },
            jsonBody: {
                start_time: data.startDate,
                timezone: data.timezone,
                is_recurring: data.isRecurring,
                duration: data.duration,
                category_id: data.categoryId,
                title: data.title
            }
        });
        return new HelixScheduleSegment_1.HelixScheduleSegment(result.data.segments[0], this._client);
    }
    /**
     * Updates a segment in a given broadcaster's schedule.
     *
     * @param broadcaster The broadcaster to create a new schedule segment for.
     * @param segmentId The ID of the segment to update.
     * @param data
     *
     * @expandParams
     */
    async updateScheduleSegment(broadcaster, segmentId, data) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'schedule/segment',
            method: 'PATCH',
            scope: 'channel:manage:schedule',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                id: segmentId
            },
            jsonBody: {
                start_time: data.startDate,
                timezone: data.timezone,
                is_canceled: data.isCanceled,
                duration: data.duration,
                category_id: data.categoryId,
                title: data.title
            }
        });
        return new HelixScheduleSegment_1.HelixScheduleSegment(result.data.segments[0], this._client);
    }
    /**
     * Deletes a segment in a given broadcaster's schedule.
     *
     * @param broadcaster The broadcaster to create a new schedule segment for.
     * @param segmentId The ID of the segment to update.
     */
    async deleteScheduleSegment(broadcaster, segmentId) {
        await this._client.callApi({
            type: 'helix',
            url: 'schedule/segment',
            method: 'DELETE',
            scope: 'channel:manage:schedule',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster),
                id: segmentId
            }
        });
    }
}
exports.HelixScheduleApi = HelixScheduleApi;

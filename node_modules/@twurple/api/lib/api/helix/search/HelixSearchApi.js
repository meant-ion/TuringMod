"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixSearchApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixGame_1 = require("../game/HelixGame");
const HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
const HelixPaginatedResult_1 = require("../HelixPaginatedResult");
const HelixPagination_1 = require("../HelixPagination");
const HelixChannelSearchResult_1 = require("./HelixChannelSearchResult");
/**
 * The Helix API methods that run searches.
 *
 * Can be accessed using `client.search` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const channels = await api.search.searchChannels('pear');
 * ```
 */
let HelixSearchApi = class HelixSearchApi extends BaseApi_1.BaseApi {
    /**
     * Search categories/games for an exact or partial match.
     *
     * @param query The search term.
     * @param pagination
     *
     * @expandParams
     */
    async searchCategories(query, pagination) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'search/categories',
            query: {
                query,
                ...HelixPagination_1.makePaginationQuery(pagination)
            }
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixGame_1.HelixGame, this._client);
    }
    /**
     * Creates a paginator for a category/game search.
     *
     * @param query The search term.
     */
    searchCategoriesPaginated(query) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'search/categories',
            query: {
                query
            }
        }, this._client, data => new HelixGame_1.HelixGame(data, this._client));
    }
    /**
     * Search channels for an exact or partial match.
     *
     * @param query The search term.
     * @param filter
     *
     * @expandParams
     */
    async searchChannels(query, filter = {}) {
        var _a;
        const result = await this._client.callApi({
            type: 'helix',
            url: 'search/channels',
            query: {
                query,
                live_only: (_a = filter.liveOnly) === null || _a === void 0 ? void 0 : _a.toString(),
                ...HelixPagination_1.makePaginationQuery(filter)
            }
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixChannelSearchResult_1.HelixChannelSearchResult, this._client);
    }
    /**
     * Creates a paginator for a channel search.
     *
     * @param query The search term.
     * @param filter
     *
     * @expandParams
     */
    searchChannelsPaginated(query, filter = {}) {
        var _a;
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'search/channels',
            query: {
                query,
                live_only: (_a = filter.liveOnly) === null || _a === void 0 ? void 0 : _a.toString()
            }
        }, this._client, data => new HelixChannelSearchResult_1.HelixChannelSearchResult(data, this._client));
    }
};
HelixSearchApi = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixSearchApi')
], HelixSearchApi);
exports.HelixSearchApi = HelixSearchApi;

"use strict";
var HelixStreamApi_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixStreamApi = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const api_call_1 = require("@twurple/api-call");
const common_1 = require("@twurple/common");
const StreamNotLiveError_1 = require("../../../errors/StreamNotLiveError");
const BaseApi_1 = require("../../BaseApi");
const HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
const HelixPaginatedResult_1 = require("../HelixPaginatedResult");
const HelixPagination_1 = require("../HelixPagination");
const HelixTag_1 = require("../tag/HelixTag");
const HelixStream_1 = require("./HelixStream");
const HelixStreamMarker_1 = require("./HelixStreamMarker");
const HelixStreamMarkerWithVideo_1 = require("./HelixStreamMarkerWithVideo");
/**
 * The Helix API methods that deal with streams.
 *
 * Can be accessed using `client.streams` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const stream = await api.streams.getStreamByUserId('125328655');
 * ```
 */
let HelixStreamApi = HelixStreamApi_1 = class HelixStreamApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves a list of streams.
     *
     * @expandParams
     */
    async getStreams(filter = {}) {
        const result = await this._client.callApi({
            url: 'streams',
            type: 'helix',
            query: {
                ...HelixPagination_1.makePaginationQuery(filter),
                community_id: filter.community,
                game_id: filter.game,
                language: filter.language,
                type: filter.type,
                user_id: filter.userId,
                user_login: filter.userName
            }
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixStream_1.HelixStream, this._client);
    }
    /**
     * Creates a paginator for streams.
     *
     * @expandParams
     */
    getStreamsPaginated(filter = {}) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'streams',
            query: {
                community_id: filter.community,
                game_id: filter.game,
                language: filter.language,
                type: filter.type,
                user_id: filter.userId,
                user_login: filter.userName
            }
        }, this._client, data => new HelixStream_1.HelixStream(data, this._client));
    }
    /**
     * Retrieves the current stream for the given user name.
     *
     * @param user The user name to retrieve the stream for.
     */
    async getStreamByUserName(user) {
        const result = await this.getStreams({ userName: common_1.extractUserName(user) });
        return result.data.length ? result.data[0] : null;
    }
    /**
     * Retrieves the current stream for the given user ID.
     *
     * @param user The user ID to retrieve the stream for.
     */
    async getStreamByUserId(user) {
        const result = await this.getStreams({ userId: common_1.extractUserId(user) });
        return result.data.length ? result.data[0] : null;
    }
    /**
     * Retrieves a list of all stream markers for an user.
     *
     * @param user The user to list the stream markers for.
     * @param pagination
     *
     * @expandParams
     */
    async getStreamMarkersForUser(user, pagination) {
        return await this._getStreamMarkers('user_id', common_1.extractUserId(user), pagination);
    }
    /**
     * Creates a paginator for all stream markers for an user.
     *
     * @param user The user to list the stream markers for.
     */
    getStreamMarkersForUserPaginated(user) {
        return this._getStreamMarkersPaginated('user_id', common_1.extractUserId(user));
    }
    /**
     * Retrieves a list of all stream markers for a video.
     *
     * @param videoId The video to list the stream markers for.
     * @param pagination
     *
     * @expandParams
     */
    async getStreamMarkersForVideo(videoId, pagination) {
        return await this._getStreamMarkers('video_id', videoId, pagination);
    }
    /**
     * Creates a paginator for all stream markers for a video.
     *
     * @param videoId The video to list the stream markers for.
     */
    getStreamMarkersForVideoPaginated(videoId) {
        return this._getStreamMarkersPaginated('video_id', videoId);
    }
    /**
     * Creates a new stream marker.
     *
     * Only works while the specified user's stream is live.
     *
     * @param broadcaster The broadcaster to create a stream marker for.
     * @param description The description of the marker.
     */
    async createStreamMarker(broadcaster, description) {
        try {
            const result = await this._client.callApi({
                url: 'streams/markers',
                method: 'POST',
                type: 'helix',
                scope: 'user:edit:broadcast',
                query: {
                    user_id: common_1.extractUserId(broadcaster),
                    description
                }
            });
            return new HelixStreamMarker_1.HelixStreamMarker(result.data[0], this._client);
        }
        catch (e) {
            if (e instanceof api_call_1.HttpStatusCodeError && e.statusCode === 404) {
                throw new StreamNotLiveError_1.StreamNotLiveError();
            }
            throw e;
        }
    }
    /**
     * Retrieves the tags of a stream.
     *
     * @param broadcaster The broadcaster of the stream.
     */
    async getStreamTags(broadcaster) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'streams/tags',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster)
            }
        });
        return result.data.map(data => new HelixTag_1.HelixTag(data));
    }
    /**
     * Replaces the tags of a stream.
     *
     * @param broadcaster The broadcaster of the stream.
     * @param tagIds The tags to set. If not given, removes all tags.
     */
    async replaceStreamTags(broadcaster, tagIds) {
        await this._client.callApi({
            type: 'helix',
            url: 'streams/tags',
            scope: 'user:edit:broadcast',
            method: 'PUT',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster)
            },
            jsonBody: {
                tag_ids: tagIds
            }
        });
    }
    /**
     * Retrieves the stream key of a stream.
     *
     * @param broadcaster The broadcaster to retrieve the stream key for.
     */
    async getStreamKey(broadcaster) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'streams/key',
            scope: 'channel:read:stream_key',
            query: {
                broadcaster_id: common_1.extractUserId(broadcaster)
            }
        });
        return result.data[0].stream_key;
    }
    /**
     * Retrieves the streams that are currently live and are followed by the given user.
     *
     * @param user The user to check followed streams for.
     * @param pagination
     *
     * @expandParams
     */
    async getFollowedStreams(user, pagination) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'streams/followed',
            scope: 'user:read:follows',
            query: {
                user_id: common_1.extractUserId(user),
                ...HelixPagination_1.makePaginationQuery(pagination)
            }
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixStream_1.HelixStream, this._client);
    }
    /**
     * Creates a paginator for the streams that are currently live and are followed by the given user.
     *
     * @param user The user to check followed streams for.
     */
    getFollowedStreamsPaginated(user) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'stream/followed',
            scope: 'user:read:follows',
            query: {
                user_id: common_1.extractUserId(user)
            }
        }, this._client, data => new HelixStream_1.HelixStream(data, this._client));
    }
    async _getStreamMarkers(queryType, id, pagination) {
        var _a;
        const result = await this._client.callApi({
            url: 'streams/markers',
            type: 'helix',
            query: {
                [queryType]: id,
                ...HelixPagination_1.makePaginationQuery(pagination)
            },
            scope: 'user:read:broadcast'
        });
        return {
            data: shared_utils_1.flatten(result.data.map(HelixStreamApi_1._mapGetStreamMarkersResult.bind(this._client))),
            cursor: (_a = result.pagination) === null || _a === void 0 ? void 0 : _a.cursor
        };
    }
    _getStreamMarkersPaginated(queryType, id) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'streams/markers',
            query: {
                [queryType]: id
            },
            scope: 'user:read:broadcast'
        }, this._client, HelixStreamApi_1._mapGetStreamMarkersResult.bind(this._client));
    }
    static _mapGetStreamMarkersResult(data) {
        return data.videos.reduce((result, video) => [
            ...result,
            ...video.markers.map(marker => new HelixStreamMarkerWithVideo_1.HelixStreamMarkerWithVideo(marker, video.video_id, this))
        ], []);
    }
};
HelixStreamApi = HelixStreamApi_1 = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixStreamApi')
], HelixStreamApi);
exports.HelixStreamApi = HelixStreamApi;

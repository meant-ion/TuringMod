import { DataObject } from '@twurple/common';
import type { ApiClient } from '../../../ApiClient';
import type { HelixEventData } from '../HelixEvent';
import type { HelixUser } from '../user/HelixUser';
import type { HelixSubscriptionData } from './HelixSubscription';
/**
 * The different types a subscription event can have.
 */
export declare type HelixSubscriptionEventType = 'subscriptions.subscribe' | 'subscriptions.unsubscribe' | 'subscriptions.notification';
/** @private */
export declare type HelixSubscriptionEventData = HelixEventData<HelixSubscriptionData, HelixSubscriptionEventType>;
/**
 * An event that indicates the change of a subscription status, i.e. subscribing, unsubscribing or sending the monthly notification.
 */
export declare class HelixSubscriptionEvent extends DataObject<HelixSubscriptionEventData> {
    private readonly _client;
    /** @private */
    constructor(eventData: HelixSubscriptionEventData, client: ApiClient);
    /**
     * The unique ID of the subscription event.
     */
    get eventId(): string;
    /**
     * The type of the subscription event.
     */
    get eventType(): HelixSubscriptionEventType;
    /**
     * The date of the subscription event.
     */
    get eventDate(): Date;
    /**
     * The version of the subscription event.
     */
    get eventVersion(): string;
    /**
     * The message sent with the subscription event.
     */
    get eventMessage(): string;
    /**
     * Whether the subscription has been gifted by another user.
     */
    get isGift(): boolean;
    /**
     * The tier of the subscription.
     */
    get tier(): string;
    /**
     * The user ID of the gifter.
     */
    get gifterId(): string;
    /**
     * The name of the gifter.
     */
    get gifterName(): string;
    /**
     * The display name of the gifter.
     */
    get gifterDisplayName(): string;
    /**
     * Retrieves more information about the gifter.
     */
    getGifter(): Promise<HelixUser>;
    /**
     * The user ID of the subscribed user.
     */
    get userId(): string;
    /**
     * The name of the subscribed user.
     */
    get userName(): string;
    /**
     * The display name of the subscribed user.
     */
    get userDisplayName(): string;
    /**
     * Retrieves more information about the subscribed user.
     */
    getUser(): Promise<HelixUser>;
}
//# sourceMappingURL=HelixSubscriptionEvent.d.ts.map
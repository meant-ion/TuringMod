"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixSubscriptionEvent = void 0;
const tslib_1 = require("tslib");
const shared_utils_1 = require("@d-fischer/shared-utils");
const common_1 = require("@twurple/common");
/**
 * An event that indicates the change of a subscription status, i.e. subscribing, unsubscribing or sending the monthly notification.
 */
let HelixSubscriptionEvent = class HelixSubscriptionEvent extends common_1.DataObject {
    /** @private */
    constructor(eventData, client) {
        super(eventData);
        this._client = client;
    }
    /**
     * The unique ID of the subscription event.
     */
    get eventId() {
        return this[common_1.rawDataSymbol].id;
    }
    /**
     * The type of the subscription event.
     */
    get eventType() {
        return this[common_1.rawDataSymbol].event_type;
    }
    /**
     * The date of the subscription event.
     */
    get eventDate() {
        return new Date(this[common_1.rawDataSymbol].event_timestamp);
    }
    /**
     * The version of the subscription event.
     */
    get eventVersion() {
        return this[common_1.rawDataSymbol].version;
    }
    /**
     * The message sent with the subscription event.
     */
    get eventMessage() {
        var _a;
        return (_a = this[common_1.rawDataSymbol].event_data.message) !== null && _a !== void 0 ? _a : '';
    }
    /**
     * Whether the subscription has been gifted by another user.
     */
    get isGift() {
        return this[common_1.rawDataSymbol].event_data.is_gift;
    }
    /**
     * The tier of the subscription.
     */
    get tier() {
        return this[common_1.rawDataSymbol].event_data.tier;
    }
    /**
     * The user ID of the gifter.
     */
    get gifterId() {
        return this[common_1.rawDataSymbol].event_data.gifter_id;
    }
    /**
     * The name of the gifter.
     */
    get gifterName() {
        return this[common_1.rawDataSymbol].event_data.gifter_login;
    }
    /**
     * The display name of the gifter.
     */
    get gifterDisplayName() {
        return this[common_1.rawDataSymbol].event_data.gifter_name;
    }
    /**
     * Retrieves more information about the gifter.
     */
    async getGifter() {
        return (await this._client.users.getUserById(this[common_1.rawDataSymbol].event_data.gifter_id));
    }
    /**
     * The user ID of the subscribed user.
     */
    get userId() {
        return this[common_1.rawDataSymbol].event_data.user_id;
    }
    /**
     * The name of the subscribed user.
     */
    get userName() {
        return this[common_1.rawDataSymbol].event_data.user_login;
    }
    /**
     * The display name of the subscribed user.
     */
    get userDisplayName() {
        return this[common_1.rawDataSymbol].event_data.user_name;
    }
    /**
     * Retrieves more information about the subscribed user.
     */
    async getUser() {
        return (await this._client.users.getUserById(this[common_1.rawDataSymbol].event_data.user_id));
    }
};
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], HelixSubscriptionEvent.prototype, "_client", void 0);
HelixSubscriptionEvent = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixSubscriptionEvent', 'userId')
], HelixSubscriptionEvent);
exports.HelixSubscriptionEvent = HelixSubscriptionEvent;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixTagApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
const HelixPaginatedResult_1 = require("../HelixPaginatedResult");
const HelixPagination_1 = require("../HelixPagination");
const HelixTag_1 = require("./HelixTag");
/**
 * The Helix API methods that deal with tags.
 *
 * Can be accessed using `client.tags` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const tags = await api.tags.getAllStreamTags();
 * ```
 */
let HelixTagApi = class HelixTagApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves all stream tags.
     *
     * @param pagination
     *
     * @expandParams
     */
    async getAllStreamTags(pagination) {
        const result = await this._client.callApi({
            type: 'helix',
            url: 'tags/streams',
            query: HelixPagination_1.makePaginationQuery(pagination)
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixTag_1.HelixTag);
    }
    /**
     * Creates a paginator for all stream tags.
     */
    getAllStreamTagsPaginated() {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'tags/streams'
        }, this._client, data => new HelixTag_1.HelixTag(data));
    }
    /**
     * Retrieves a set of stream tags by IDs.
     *
     * @param ids The IDs of the stream tags.
     */
    async getStreamTagsByIds(ids) {
        if (!ids.length) {
            return [];
        }
        const result = await this._client.callApi({
            type: 'helix',
            url: 'tags/streams',
            query: {
                tag_id: ids
            }
        });
        return result.data.map(data => new HelixTag_1.HelixTag(data));
    }
    /**
     * Retrieves a single stream tag by ID.
     *
     * @param id The ID of the stream tag.
     */
    async getStreamTagById(id) {
        var _a;
        const tags = await this.getStreamTagsByIds([id]);
        return (_a = tags[0]) !== null && _a !== void 0 ? _a : null;
    }
};
HelixTagApi = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixTagApi')
], HelixTagApi);
exports.HelixTagApi = HelixTagApi;

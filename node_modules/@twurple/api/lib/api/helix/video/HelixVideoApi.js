"use strict";
var HelixVideoApi_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HelixVideoApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../../BaseApi");
const HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
const HelixPaginatedResult_1 = require("../HelixPaginatedResult");
const HelixPagination_1 = require("../HelixPagination");
const HelixVideo_1 = require("./HelixVideo");
/**
 * The Helix API methods that deal with videos.
 *
 * Can be accessed using `client.videos` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const { data: videos } = await api.videos.getVideosByUser('125328655');
 * ```
 */
let HelixVideoApi = HelixVideoApi_1 = class HelixVideoApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves the video data for the given list of video IDs.
     *
     * @param ids The video IDs you want to look up.
     */
    async getVideosByIds(ids) {
        const result = await this._getVideos('id', ids);
        return result.data;
    }
    /**
     * Retrieves the video data for the given video ID.
     *
     * @param id The video ID you want to look up.
     */
    async getVideoById(id) {
        const videos = await this.getVideosByIds([id]);
        return videos.length ? videos[0] : null;
    }
    /**
     * Retrieves the videos of the given user.
     *
     * @param user The user you want to retrieve videos from.
     * @param filter
     *
     * @expandParams
     */
    async getVideosByUser(user, filter = {}) {
        const userId = common_1.extractUserId(user);
        return await this._getVideos('user_id', [userId], filter);
    }
    /**
     * Creates a paginator for videos of the given user.
     *
     * @param user The user you want to retrieve videos from.
     * @param filter
     *
     * @expandParams
     */
    getVideosByUserPaginated(user, filter = {}) {
        const userId = common_1.extractUserId(user);
        return this._getVideosPaginated('user_id', [userId], filter);
    }
    /**
     * Retrieves the videos of the given game.
     *
     * @param gameId The game you want to retrieve videos from.
     * @param filter
     *
     * @expandParams
     */
    async getVideosByGame(gameId, filter = {}) {
        return await this._getVideos('game_id', [gameId], filter);
    }
    /**
     * Creates a paginator for videos of the given game.
     *
     * @param gameId The game you want to retrieve videos from.
     * @param filter
     *
     * @expandParams
     */
    getVideosByGamePaginated(gameId, filter = {}) {
        return this._getVideosPaginated('game_id', [gameId], filter);
    }
    /**
     * Deletes videos by its IDs.
     *
     * @param ids The IDs of the videos to delete.
     */
    async deleteVideosByIds(ids) {
        await this._client.callApi({
            type: 'helix',
            url: 'videos',
            method: 'DELETE',
            scope: 'channel:manage:videos',
            query: {
                id: ids
            }
        });
    }
    async _getVideos(filterType, filterValues, filter = {}) {
        if (!filterValues.length) {
            return { data: [] };
        }
        const result = await this._client.callApi({
            url: 'videos',
            type: 'helix',
            query: {
                ...HelixVideoApi_1._makeVideosQuery(filterType, filterValues, filter),
                ...HelixPagination_1.makePaginationQuery(filter)
            }
        });
        return HelixPaginatedResult_1.createPaginatedResult(result, HelixVideo_1.HelixVideo, this._client);
    }
    _getVideosPaginated(filterType, filterValues, filter = {}) {
        return new HelixPaginatedRequest_1.HelixPaginatedRequest({
            url: 'videos',
            query: HelixVideoApi_1._makeVideosQuery(filterType, filterValues, filter)
        }, this._client, data => new HelixVideo_1.HelixVideo(data, this._client));
    }
    static _makeVideosQuery(filterType, filterValues, filter = {}) {
        const { language, period, orderBy, type } = filter;
        return {
            [filterType]: filterValues,
            language,
            period,
            sort: orderBy,
            type
        };
    }
};
HelixVideoApi = HelixVideoApi_1 = tslib_1.__decorate([
    common_1.rtfm('api', 'HelixVideoApi')
], HelixVideoApi);
exports.HelixVideoApi = HelixVideoApi;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnsupportedApi = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@twurple/common");
const BaseApi_1 = require("../BaseApi");
const ChattersList_1 = require("./ChattersList");
/**
 * Different API methods that are not officially supported by Twitch.
 *
 * Can be accessed using `client.unsupported` on an {@ApiClient} instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const events = await api.unsupported.getChatters('yourfavoritestreamer');
 * ```
 */
let UnsupportedApi = class UnsupportedApi extends BaseApi_1.BaseApi {
    /**
     * Retrieves a list of chatters in the Twitch chat of the given channel.
     *
     * **WARNING:** In contrast to most other methods, this takes a channel *name*, not a user ID.
     *
     * @param channel The channel to retrieve the chatters for.
     */
    async getChatters(channel) {
        const channelName = common_1.extractUserName(channel);
        const data = await this._client.callApi({
            url: `https://tmi.twitch.tv/group/user/${channelName}/chatters`,
            type: 'custom'
        });
        return new ChattersList_1.ChattersList(data);
    }
};
UnsupportedApi = tslib_1.__decorate([
    common_1.rtfm('api', 'UnsupportedApi')
], UnsupportedApi);
exports.UnsupportedApi = UnsupportedApi;

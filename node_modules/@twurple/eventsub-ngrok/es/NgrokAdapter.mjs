import { __decorate } from "tslib";
import { getPortPromise } from '@d-fischer/portfinder';
import { Enumerable } from '@d-fischer/shared-utils';
import { ConnectionAdapter } from '@twurple/eventsub';
import { connect } from 'ngrok';
/**
 * A connection adapter that uses ngrok to make local testing easy.
 */
export class NgrokAdapter extends ConnectionAdapter {
    /** @protected */
    // eslint-disable-next-line @typescript-eslint/class-literal-property-style
    get connectUsingSsl() {
        return true;
    }
    /** @protected */
    async getListenerPort() {
        if (!this._listenerPortPromise) {
            this._listenerPortPromise = getPortPromise();
        }
        return await this._listenerPortPromise;
    }
    /** @protected */
    async getHostName() {
        const listenerPort = await this.getListenerPort();
        if (!this._hostNamePromise) {
            this._hostNamePromise = connect({ addr: listenerPort }).then(url => url.replace(/^https?:\/\/|\/$/, ''));
        }
        return await this._hostNamePromise;
    }
}
__decorate([
    Enumerable(false)
], NgrokAdapter.prototype, "_listenerPortPromise", void 0);
__decorate([
    Enumerable(false)
], NgrokAdapter.prototype, "_hostNamePromise", void 0);

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgrokAdapter = void 0;
const tslib_1 = require("tslib");
const portfinder_1 = require("@d-fischer/portfinder");
const shared_utils_1 = require("@d-fischer/shared-utils");
const eventsub_1 = require("@twurple/eventsub");
const ngrok_1 = require("ngrok");
/**
 * A connection adapter that uses ngrok to make local testing easy.
 */
class NgrokAdapter extends eventsub_1.ConnectionAdapter {
    /** @protected */
    // eslint-disable-next-line @typescript-eslint/class-literal-property-style
    get connectUsingSsl() {
        return true;
    }
    /** @protected */
    async getListenerPort() {
        if (!this._listenerPortPromise) {
            this._listenerPortPromise = portfinder_1.getPortPromise();
        }
        return await this._listenerPortPromise;
    }
    /** @protected */
    async getHostName() {
        const listenerPort = await this.getListenerPort();
        if (!this._hostNamePromise) {
            this._hostNamePromise = ngrok_1.connect({ addr: listenerPort }).then(url => url.replace(/^https?:\/\/|\/$/, ''));
        }
        return await this._hostNamePromise;
    }
}
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], NgrokAdapter.prototype, "_listenerPortPromise", void 0);
tslib_1.__decorate([
    shared_utils_1.Enumerable(false)
], NgrokAdapter.prototype, "_hostNamePromise", void 0);
exports.NgrokAdapter = NgrokAdapter;

import { __decorate } from "tslib";
import { Enumerable, utf8Substring } from '@d-fischer/shared-utils';
import { ChatEmote, DataObject, fillTextPositions, rawDataSymbol, rtfm } from '@twurple/common';
/**
 * An EventSub event representing the public announcement of a channel subscription by the subscriber.
 */
let EventSubChannelSubscriptionMessageEvent = class EventSubChannelSubscriptionMessageEvent extends DataObject {
    /** @private */
    constructor(data, client) {
        super(data);
        this._client = client;
    }
    /**
     * The ID of the user whose subscription is being announced.
     */
    get userId() {
        return this[rawDataSymbol].user_id;
    }
    /**
     * The name of the user whose subscription is being announced.
     */
    get userName() {
        return this[rawDataSymbol].user_login;
    }
    /**
     * The display name of the user whose subscription is being announced.
     */
    get userDisplayName() {
        return this[rawDataSymbol].user_name;
    }
    /**
     * Retrieves more information about the user whose subscription is being announced.
     */
    async getUser() {
        return (await this._client.users.getUserById(this[rawDataSymbol].user_id));
    }
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId() {
        return this[rawDataSymbol].broadcaster_user_id;
    }
    /**
     * The name of the broadcaster.
     */
    get broadcasterName() {
        return this[rawDataSymbol].broadcaster_user_login;
    }
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName() {
        return this[rawDataSymbol].broadcaster_user_name;
    }
    /**
     * Retrieves more information about the broadcaster.
     */
    async getBroadcaster() {
        return (await this._client.users.getUserById(this[rawDataSymbol].broadcaster_user_id));
    }
    /**
     * The tier of the subscription, either 1000, 2000 or 3000.
     */
    get tier() {
        return this[rawDataSymbol].tier;
    }
    /**
     * The total number of months the user has been subscribed.
     */
    get cumulativeMonths() {
        return this[rawDataSymbol].cumulative_months;
    }
    /**
     * The number of months the user has been subscribed in a row, or null if they don't want to share it.
     */
    get streakMonths() {
        return this[rawDataSymbol].streak_months;
    }
    /**
     * The number of months the user has now subscribed.
     */
    get durationMonths() {
        return this[rawDataSymbol].duration_months;
    }
    /**
     * The text of the message.
     */
    get messageText() {
        return this[rawDataSymbol].message.text;
    }
    /**
     * Parses the message to split emotes from text.
     */
    parseEmotes() {
        const messageText = this[rawDataSymbol].message.text;
        const emoteParts = this[rawDataSymbol].message.emotes.map(({ begin, end, id }) => {
            const name = utf8Substring(messageText, begin, end + 1);
            return {
                type: 'emote',
                position: begin,
                length: end - begin + 1,
                id,
                name,
                displayInfo: new ChatEmote({
                    code: name,
                    id
                })
            };
        });
        return fillTextPositions(messageText, emoteParts);
    }
};
__decorate([
    Enumerable(false)
], EventSubChannelSubscriptionMessageEvent.prototype, "_client", void 0);
EventSubChannelSubscriptionMessageEvent = __decorate([
    rtfm('eventsub', 'EventSubChannelSubscriptionMessageEvent', 'userId')
], EventSubChannelSubscriptionMessageEvent);
export { EventSubChannelSubscriptionMessageEvent };

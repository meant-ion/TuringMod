import type { ConnectionAdapter } from './adapters/ConnectionAdapter';
import type { EventSubBaseConfig } from './EventSubBase';
import { EventSubBase } from './EventSubBase';
/**
 * Certificate data used to make the listener server SSL capable.
 */
export interface EventSubListenerCertificateConfig {
    /**
     * The private key of your SSL certificate.
     */
    key: string;
    /**
     * Your full SSL certificate chain, including all intermediate certificates.
     */
    cert: string;
}
/**
 * Configuration for an EventSub listener.
 *
 * @inheritDoc
 */
export interface EventSubListenerConfig extends EventSubBaseConfig {
    /**
     * The connection adapter responsible for the configuration of the connection method.
     */
    adapter: ConnectionAdapter;
}
/**
 * A listener for the Twitch EventSub event distribution mechanism.
 *
 * @hideProtected
 * @inheritDoc
 */
export declare class EventSubListener extends EventSubBase {
    private _server?;
    private readonly _adapter;
    /**
     * Creates a new EventSub listener.
     *
     * @param config
     *
     * @expandParams
     */
    constructor(config: EventSubListenerConfig);
    /**
     * Starts the backing server and listens to incoming EventSub notifications.
     */
    listen(port?: number): Promise<void>;
    /**
     * Stops the backing server, suspending all active subscriptions.
     */
    unlisten(): Promise<void>;
    protected getHostName(): Promise<string>;
    protected getPathPrefix(): Promise<string | undefined>;
}
//# sourceMappingURL=EventSubListener.d.ts.map
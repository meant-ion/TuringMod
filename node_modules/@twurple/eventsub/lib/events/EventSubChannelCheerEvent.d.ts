import type { ApiClient, HelixUser } from '@twurple/api';
import { DataObject } from '@twurple/common';
/** @private */
export interface EventSubChannelCheerEventData {
    is_anonymous: boolean;
    user_id: string | null;
    user_login: string | null;
    user_name: string | null;
    broadcaster_user_id: string;
    broadcaster_user_login: string;
    broadcaster_user_name: string;
    message: string;
    bits: number;
}
/**
 * An EventSub event representing a user cheering bits.
 */
export declare class EventSubChannelCheerEvent extends DataObject<EventSubChannelCheerEventData> {
    private readonly _client;
    /** @private */
    constructor(data: EventSubChannelCheerEventData, client: ApiClient);
    /**
     * The ID of the cheering user, null if anonymous.
     */
    get userId(): string | null;
    /**
     * The name of the cheering user, null if anonymous.
     */
    get userName(): string | null;
    /**
     * The display name of the cheering user, null if anonymous.
     */
    get userDisplayName(): string | null;
    /**
     * Retrieves more information about the user.
     */
    getUser(): Promise<HelixUser | null>;
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId(): string;
    /**
     * The name of the broadcaster.
     */
    get broadcasterName(): string;
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName(): string;
    /**
     * Retrieves more information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * Whether the cheering user chose to be anonymous.
     */
    get isAnonymous(): boolean;
    /**
     * The message sent with the cheer.
     */
    get message(): string;
    /**
     * The amount of bits cheered.
     */
    get bits(): number;
}
//# sourceMappingURL=EventSubChannelCheerEvent.d.ts.map
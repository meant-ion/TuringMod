import type { ApiClient, HelixUser } from '@twurple/api';
import { DataObject } from '@twurple/common';
/** @private */
export interface EventSubChannelRaidEventData {
    from_broadcaster_user_id: string;
    from_broadcaster_user_login: string;
    from_broadcaster_user_name: string;
    to_broadcaster_user_id: string;
    to_broadcaster_user_login: string;
    to_broadcaster_user_name: string;
    viewers: number;
}
/**
 * An EventSub event representing a broadcaster raiding another broadcaster.
 */
export declare class EventSubChannelRaidEvent extends DataObject<EventSubChannelRaidEventData> {
    private readonly _client;
    /** @private */
    constructor(data: EventSubChannelRaidEventData, client: ApiClient);
    /**
     * The ID of the raiding broadcaster.
     */
    get raidingBroadcasterId(): string;
    /**
     * The name of the raiding broadcaster.
     */
    get raidingBroadcasterName(): string;
    /**
     * The display name of the raiding broadcaster.
     */
    get raidingBroadcasterDisplayName(): string;
    /**
     * Retrieves more information about the raiding broadcaster.
     */
    getRaidingBroadcaster(): Promise<HelixUser>;
    /**
     * The ID of the raided broadcaster.
     */
    get raidedBroadcasterId(): string;
    /**
     * The name of the raided broadcaster.
     */
    get raidedBroadcasterName(): string;
    /**
     * The display name of the raided broadcaster.
     */
    get raidedBroadcasterDisplayName(): string;
    /**
     * Retrieves more information about the raided broadcaster.
     */
    getRaidedBroadcaster(): Promise<HelixUser>;
    /**
     * The amount of viewers in the raid.
     */
    get viewers(): number;
}
//# sourceMappingURL=EventSubChannelRaidEvent.d.ts.map
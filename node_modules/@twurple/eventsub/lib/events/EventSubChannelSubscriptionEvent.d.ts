import type { ApiClient, HelixUser } from '@twurple/api';
import { DataObject } from '@twurple/common';
/**
 * The tier of a subscription. 1000 means tier 1, and so on.
 */
export declare type EventSubChannelSubscriptionEventTier = '1000' | '2000' | '3000';
/** @private */
export interface EventSubChannelSubscriptionEventData {
    user_id: string;
    user_login: string;
    user_name: string;
    broadcaster_user_id: string;
    broadcaster_user_login: string;
    broadcaster_user_name: string;
    tier: EventSubChannelSubscriptionEventTier;
    is_gift: boolean;
}
/**
 * An EventSub event representing a channel subscription.
 */
export declare class EventSubChannelSubscriptionEvent extends DataObject<EventSubChannelSubscriptionEventData> {
    private readonly _client;
    /** @private */
    constructor(data: EventSubChannelSubscriptionEventData, client: ApiClient);
    /**
     * The ID of the subscribing user.
     */
    get userId(): string;
    /**
     * The name of the subscribing user.
     */
    get userName(): string;
    /**
     * The display name of the subscribing user.
     */
    get userDisplayName(): string;
    /**
     * Retrieves more information about the subscribing user.
     */
    getUser(): Promise<HelixUser>;
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId(): string;
    /**
     * The name of the broadcaster.
     */
    get broadcasterName(): string;
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName(): string;
    /**
     * Retrieves more information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * The tier of the subscription, either 1000, 2000 or 3000.
     */
    get tier(): EventSubChannelSubscriptionEventTier;
    /**
     * Whether the subscription has been gifted.
     */
    get isGift(): boolean;
}
//# sourceMappingURL=EventSubChannelSubscriptionEvent.d.ts.map
import type { ApiClient, HelixUser } from '@twurple/api';
import { DataObject } from '@twurple/common';
/**
 * The tier of a gifted subscription. 1000 means tier 1, and so on.
 */
export declare type EventSubChannelSubscriptionGiftEventTier = '1000' | '2000' | '3000';
/** @private */
export interface EventSubChannelSubscriptionGiftEventData {
    user_id: string;
    user_login: string;
    user_name: string;
    broadcaster_user_id: string;
    broadcaster_user_login: string;
    broadcaster_user_name: string;
    total: number;
    tier: EventSubChannelSubscriptionGiftEventTier;
    cumulative_total: number | null;
    is_anonymous: boolean;
}
/**
 * An EventSub event representing a channel subscription.
 */
export declare class EventSubChannelSubscriptionGiftEvent extends DataObject<EventSubChannelSubscriptionGiftEventData> {
    private readonly _client;
    /** @private */
    constructor(data: EventSubChannelSubscriptionGiftEventData, client: ApiClient);
    /**
     * The ID of the gifting user.
     */
    get gifterId(): string;
    /**
     * The name of the gifting user.
     */
    get gifterName(): string;
    /**
     * The display name of the gifting user.
     */
    get gifterDisplayName(): string;
    /**
     * Retrieves more information about the gifting user.
     */
    getGifter(): Promise<HelixUser>;
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId(): string;
    /**
     * The name of the broadcaster.
     */
    get broadcasterName(): string;
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName(): string;
    /**
     * Retrieves more information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * The amount of gifts that were gifted.
     */
    get amount(): number;
    /**
     * The amount of gifts that the gifter has sent in total, or `null` the gift is anonymous.
     */
    get cumulativeAmount(): number | null;
    /**
     * The tier of the subscription, either 1000, 2000 or 3000.
     */
    get tier(): EventSubChannelSubscriptionGiftEventTier;
    /**
     * Whether the gift is anonymous.
     */
    get isAnonymous(): boolean;
}
//# sourceMappingURL=EventSubChannelSubscriptionGiftEvent.d.ts.map
import EventTarget, { Event } from 'event-target-shim';
/**
Play some audio.

@example
```js
import Audic from 'audic';

const audic = new Audic('audio.mp3');

await audic.play();

audic.addEventListener('ended', () => {
    audic.destroy();
});
```
*/
export default class Audic extends EventTarget<{
    'timeupdate': Event<'timeupdate'>;
    'ended': Event<'ended'>;
    'playing': Event<'playing'>;
    'pause': Event<'pause'>;
    'volumechange': Event<'volumechange'>;
    'canplay': Event<'canplay'>;
    'canplaythrough': Event<'canplaythrough'>;
    'seeking': Event<'seeking'>;
    'seeked': Event<'seeked'>;
    'play': Event<'play'>;
}> {
    /**
    The duration of the audio.
    */
    duration: number;
    private _playing;
    private _src?;
    private _volume;
    private _currentTime;
    private readonly _vlc;
    private _loop;
    private _isEnded;
    constructor(src?: string);
    /**
    Start playing the audio.
    */
    play(): Promise<void>;
    /**
    Pause the audio playback.
    */
    pause(): Promise<void>;
    /**
    The volume of the audio as a decimal between `0` and `1`.
    */
    get volume(): number;
    /**
    The volume of the audio as a decimal between `0` and `1`.
    */
    set volume(value: number);
    /**
    The path to the file that is being played.
    */
    get src(): string | undefined;
    /**
    The path to the file that is being played.
    */
    set src(value: string | undefined);
    /**
    The current playing time of the audio.
    */
    get currentTime(): number;
    /**
    The current playing time of the audio.
    */
    set currentTime(value: number);
    /**
    Whether audio playback is looped.
    */
    get loop(): boolean;
    set loop(value: boolean);
    /**
    Whether the audio is currently playing.
    */
    get playing(): boolean;
    /**
    Whether the audio is currently playing.
    */
    set playing(value: boolean);
    /**
    Destroy the player instance.
    */
    destroy(): Promise<void>;
    private _onUpdate;
}
/**
Convenience function that plays an audio file.

@returns A promise that resolves when playback has completed.

@example
```js
import {playAudioFile} from 'audic';

await playAudioFile('audio.mp3');
```
*/
export declare function playAudioFile(src: string): Promise<void>;

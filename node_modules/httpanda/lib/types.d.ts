/// <reference types="node" />
import { IncomingMessage, Server as HttpServer, ServerResponse } from 'http';
import { ParsedUrl } from './parseUrl';
export interface Request extends IncomingMessage {
    params: Record<string, string>;
    param: Record<string, string>;
    path: string;
    query: Record<string, string | string[]>;
    search: string | null;
    /** @private */ _parseUrlCache?: ParsedUrl;
}
export declare type Response = ServerResponse;
export declare type ErrorType = any;
export declare type NextFunction = (e?: ErrorType) => void;
export declare type RequestHandler = (req: Request, res: Response, next: NextFunction) => void;
export declare type ErrorHandler = (e: ErrorType, req: Request, res: Response, next: NextFunction) => void;
export interface HttpServerOptions {
    server?: HttpServer;
    onError?: ErrorHandler;
}
export declare type HttpMethod = 'HEAD' | 'OPTIONS' | 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'CONNECT' | 'TRACE';
export interface RouteLayer {
    regex: RegExp;
    method?: HttpMethod;
    paramNames: string[];
    callbacks: RequestHandler[];
    componentsToDrop: number;
}
export interface FoundCallback {
    params: Record<string, string>;
    callback: RequestHandler;
    componentsToDrop: number;
}
